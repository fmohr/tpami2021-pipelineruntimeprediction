plugins {
	id 'java'
	id 'eclipse-wtp'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
        	srcDir 'resources'
        	srcDir 'conf'
    	}
    }
    test {
	   	java {
   			srcDir 'src/test/java'
	   	}
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	// dependencies for development time
	compile ('ai.libs:mlplan-weka') {
 		exclude group: 'org.nd4j'
 		exclude group: 'org.bytedeco.javacpp-presets'
 		exclude group: 'org.deeplearning4j'
 		exclude group: 'org.openjfx'
 		exclude group: 'com.sun.jersey'
 		exclude group: 'org.glassfish.jersey.core'
 		exclude group: 'org.glassfish.jersey.inject'
 		exclude group: 'org.apache.hadoop'
 		exclude group: 'org.apache.maven'
 		exclude group: 'org.apache.zookeeper'
 		exclude group: 'org.glassfish.jersey.ext'
 		exclude group: 'org.eclipse.rdf4j'
 		exclude group: 'net.sourceforge.owlapi'
 		exclude group: 'org.graphstream'
 		exclude group: 'com.github.graphstream'
	}
	testCompile group: 'junit', name: 'junit', version: '4.12'
	compile group: 'org.nd4j', name: 'nd4j-api', version: '1.0.0-beta2'
	compile "org.nd4j:nd4j-native-platform:1.0.0-beta6"
	compile "org.apache.commons:commons-math3:3.6.1"
	compile name: 'SMOTE-1.0.3'
	compile group: 'org.deeplearning4j', name: 'deeplearning4j-core', version: '1.0.0-beta6' // this is required by the pre-processors
	compile group: 'edu.stanford.nlp', name: 'stanford-corenlp', version: '3.9.2' // this is required by deeplearning somehow
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
	maven {
        url "http://clojars.org/repo/"
    }
    flatDir {
       dirs 'libs'
   }
}

task dsproviderJar(type: Jar) {
    manifest {
		attributes 'Main-Class': 'tpami.DatasetProvider'
    }
    zip64 = true
    baseName = 'dsprovider'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task baseLearnerMeasurementsJar(type: Jar) {
    manifest {
		attributes 'Main-Class': 'tpami.basealgorithmlearning.datagathering.classification.defaultparams.DefaultBaseLearnerExperimenter'
    }
    zip64 = true
    baseName = 'baselearnerexecutor'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task parametrizedBaseLearnerMeasurementsJar(type: Jar) {
    manifest {
		attributes 'Main-Class': 'tpami.basealgorithmlearning.datagathering.classification.parametrized.BaseLearnerExperimenter'
    }
    zip64 = true
    baseName = 'parametrizedbaselearnerexecutor'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task preprocessorsMeasurementsJar(type: Jar) {
    manifest {
		attributes 'Main-Class': 'tpami.basealgorithmlearning.datagathering.preprocessing.PreprocessingExperimenter'
    }
    zip64 = true
    baseName = 'preprocessorexecutor'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task parametrizedPreprocessorsMeasurementsJar(type: Jar) {
    manifest {
		attributes 'Main-Class': 'tpami.basealgorithmlearning.datagathering.preprocessing.parametrized.ParametrizedPreprocessingExperimenter'
    }
    zip64 = true
    baseName = 'parametrizedpreprocessorexecutor'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task metalearnerExpJar(type: Jar) {
    manifest {
		attributes 'Main-Class': 'tpami.basealgorithmlearning.datagathering.metaalgorithm.defaultparams.DefaultMetaLearnerExperimenter'
    }
    zip64 = true
    baseName = 'metalearners'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task pipelineEvaluatorJar(type: Jar) {
    manifest {
		attributes 'Main-Class': 'tpami.pipelinemeasurement.parametrized.PipelineEvaluationExecutor'
    }
    zip64 = true
    baseName = 'pipelineevaluator'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task metafeaturesJar(type: Jar) {
    manifest {
		attributes 'Main-Class': ' tpami.basealgorithmlearning.datagathering.MetaFeatureComputer'
    }
    zip64 = true
    baseName = 'metafeaturebuilder'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task resultrecoverer(type: Jar) {
    manifest {
		attributes 'Main-Class': ' tpami.basealgorithmlearning.datagathering.classification.parametrized.ResultFromLogFileRecoverer'
    }
    zip64 = true
    baseName = 'resultrecoverer'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task automlexperimenter(type: Jar) {
    manifest {
		attributes 'Main-Class': ' tpami.automlexperimenter.AutoMLExperimenter'
    }
    zip64 = true
    baseName = 'automlExperimenter'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

test {
	minHeapSize = "30M"
	maxHeapSize = "3g"
    ignoreFailures = true
   	
	testLogging {
		events "failed"
		exceptionFormat "full"
     } 	
}
eclipse {
	project.natures "org.eclipse.buildship.core.gradleprojectnature"
}